x-defaults: &default-settings
  environment:
    SERVERNAME: pong-br.com
    #############################################
    # CRS Variables
    #############################################
    # Paranoia Level
    PARANOIA: 1
    # Replaces PARANOIA as of CRS 4
    BLOCKING_PARANOIA: 1
    # Inbound and Outbound Anomaly Score Threshold
    ANOMALY_INBOUND: 5
    ANOMALY_OUTBOUND: 4
    # Executing Paranoia Level
    # - EXECUTING_PARANOIA=2
    #
    # Replaces EXECUTING_PARANOIA as of CRS 4
    # - DETECTION_PARANOIA=2
    #
    # New in CRS 4
    REPORTING_LEVEL: 2

    #######################################################
    # Reverse Proxy mode
    # (only available if SETPROXY was enabled during the
    # parent ModSecurity image)
    #######################################################
    # PROXYLOCATION: Application Backend of Reverse Proxy
    # PROXYLOCATION: http://app:8000/
    #
    # If needed: add own httpd-proxy.conf (only available if SETPROXY
    # was enabled during build of parent ModSecurity image)
    #  - ./httpd-proxy.conf:/usr/local/apache2/conf/extra/httpd-proxy.conf

    #######################################################
    # Various CRS Variables with Default Values
    #######################################################
    # ENFORCE_BODYPROC_URLENCODED: 1
    ALLOWED_METHODS: GET HEAD POST OPTIONS PUT PATCH DELETE
    # ALLOWED_REQUEST_CONTENT_TYPE: '|application/x-www-form-urlencoded| |multipart/form-data| |multipart/related| |text/xml| |application/xml| |application/soap+xml| |application/json| |application/cloudevents+json| |application/cloudevents-batch+json|'
    # ALLOWED_REQUEST_CONTENT_TYPE_CHARSET: 'utf-8|iso-8859-1|iso-8859-15|windows-1252'
    # ALLOWED_HTTP_VERSIONS: HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0
    # RESTRICTED_EXTENSIONS: .asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .rdb/ .resources/ .resx/ .sql/ .swp/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/
    # RESTRICTED_HEADERS_BASIC: /content-encoding/ /proxy/ /lock-token/ /content-range/ /if/ /x-http-method-override/ /x-http-method/ /x-method-override/
    # RESTRICTED_HEADERS_EXTENDED: /accept-charset/
    # STATIC_EXTENSIONS: /.jpg/ /.jpeg/ /.png/ /.gif/ /.js/ /.css/ /.ico/ /.svg/ /.webp/

    #######################################################
    # CRS Variables with Default Value unlimited
    #######################################################
    # MAX_NUM_ARGS: 255
    # ARG_NAME_LENGTH: 100
    # ARG_LENGTH: 400
    # TOTAL_ARG_LENGTH: 64000
    # MAX_FILE_SIZE: 1048576
    # COMBINED_FILE_SIZES: 1048576

    #######################################################
    # Volumes for ModSecurity Tuning
    #######################################################
  volumes:
    - ./REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
    - ./RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf

    #######################################################
    # Add TLS server certificate and key
    # (only available if SETPROXY was enabled during the
    # parent ModSecurity image)
    #######################################################
    #- ./server.crt:/usr/local/apache2/conf/server.crt
    #- ./server.key:/usr/local/apache2/conf/server.key


services:
  tls:
    container_name: tr_tls
    profiles:
      - setup
    build:
      context: ./requirements/tls/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    user: root  # ensures we can write to the local tls/ directory.
    init: true
    volumes:
      - ./requirements/tls/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./requirements/tls/instances.yml:/usr/share/elasticsearch/tls/instances.yml:ro,Z
      - ./requirements/tls/certs:/usr/share/elasticsearch/tls/certs:z

  setup:
    profiles:
      - setup
    build:
      context: ./requirements/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_setup
    hostname: setup
    init: true
    volumes:
      - ./data/credentials/setup_approle.env:/vault/config/setup_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      - ./requirements/setup/entrypoint.sh:/entrypoint.sh
      - ./requirements/setup/lib.sh:/lib.sh
      - ./requirements/setup/roles:/roles
      - ./requirements/tls/certs/ca/ca.crt:/ca.crt:ro,z
    environment:
      - SERVICE_NAME=setup
      - SECRET_PATH=setup
      - VAULT_ADDR=${VAULT_ADDR}
    networks:
      - transcendence
    depends_on:
      - vault
      - elasticsearch

##########################
########POSTGRESQL########
##########################
  postgresql:
    build:
      context: ./requirements/postgresql
    container_name: tr_postgresql
    volumes:
      - ./data/credentials/postgresql_approle.env:/vault/config/postgresql_approle.env:ro
      - ./requirements/postgresql/entrypoint/:/vault/entrypoint/:ro
      - postgres_data:/var/lib/postgresql/data
      - ./requirements/postgresql/postgresql.conf:/etc/postgresql.conf:ro
      - ./requirements/tls/certs/postgresql/postgresql.crt:/etc/ssl/private/server.crt
      - ./requirements/tls/certs/postgresql/postgresql.key:/etc/ssl/private/server.key
      - ./requirements/tls/certs/ca/ca.crt:/etc/ssl/private/ca.crt
    restart: always
    expose:
      - 5432
    networks:
      transcendence:
        ipv4_address: 10.0.10.12
    hostname: postgresql
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SERVICE_NAME=postgresql
      - SECRET_PATH=postgresql
    entrypoint: ["/vault/entrypoint/entrypoint.sh","docker-entrypoint.sh"]
    command: "postgres -c config_file=/etc/postgresql.conf"

######################
########DJANGO########
######################
  django:
    container_name: tr_django
    build:
      context: ./requirements/django
    hostname: django
    restart: always
    volumes:
      - ./data/django_data:/app
      - ./data/media_data:/app/media
      - ./data/credentials/django_approle.env:/vault/config/django_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      - ./requirements/tls/certs/django/django.crt:/app/certs/django.crt:ro
      - ./requirements/tls/certs/django/django.key:/app/certs/django.key:ro
      - ./requirements/tls/certs/ca/ca.crt:/app/certs/ca.crt:ro
      - ./requirements/tls/certs/apm-server/apm-server.crt:/app/certs/localhost/localhost.crt:ro
      - ./requirements/tls/certs/postgresql/:/app/certs/postgresql/:ro
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - vault
      - postgresql
    networks:
      transcendence:
        ipv4_address: 10.0.10.10
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=django
      - SECRET_PATH=django
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DJANGO_SUPERUSER_NAME=${DJANGO_SUPERUSER_NAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    entrypoint: ["/vault/entrypoint/entrypoint.sh"]
    command: "start.sh"

######################
#######CHANNELS#######
######################
  channels:
    container_name: tr_channels
    build: ./requirements/channels
    restart: always
    hostname: channels
    volumes:
      - ./data/certbot/certificates/pong-br.com/:/etc/nginx/ssl/pong-br.com/:ro
      - ./data/channels_data:/app
      - ./data/django_data/transcendence/profiles:/app/transcendence/profiles
      - ./data/django_data/transcendence/game:/app/transcendence/game
      - ./data/credentials/channels_approle.env:/vault/config/channels_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      - ./requirements/tls/certs/channels/channels.crt:/app/certs/channels.crt:ro
      - ./requirements/tls/certs/channels/channels.key:/app/certs/channels.key:ro
      - ./requirements/tls/certs/ca/ca.crt:/app/certs/ca.crt:ro
      - ./requirements/tls/certs/apm-server/apm-server.crt:/app/certs/localhost/localhost.crt:ro
      - ./requirements/tls/certs/postgresql/:/app/certs/postgresql/:ro
    expose:
      - 8002
    ports:
      - "8002:8002"
    networks:
      transcendence:
        ipv4_address: 10.0.10.11
    depends_on:
      - vault
      - redis
      - postgresql
      - django
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=channels
      - SECRET_PATH=channels
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
    entrypoint: ["/vault/entrypoint/entrypoint.sh"]
    command: "start.sh"

######################
########CELERY########
######################
  celery:
    container_name: celery
    build: ./requirements/channels
    restart: always
    volumes:
      - ./data/channels_data:/app
      - ./data/django_data/transcendence/profiles:/app/transcendence/profiles
      - ./data/credentials/channels_approle.env:/vault/config/channels_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
    networks:
      transcendence:
        ipv4_address: 10.0.10.9
    depends_on:
      - vault
      - redis
      - postgresql
      - django
    environment:
      - VAULT_ADDR=http://vault:8300
      - SERVICE_NAME=channels
      - SECRET_PATH=channels
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
    entrypoint: ["/vault/entrypoint/entrypoint.sh"]
    # command: "celery -A transcendence worker -l INFO"
    # command: "python manage.py runworker game-server"
    command: "start_worker.sh"

#####################
########REDIS########
#####################
  redis:
    image: redis:7
    container_name: tr_redis
    expose:
      - 6379
    hostname: redis
    networks:
      transcendence:
        ipv4_address: 10.0.10.70
    restart: always
    environment:
      - VAULT_ADDR=${VAULT_ADDR}

###########################
###### ELASTICSEARCH ######
###########################
  elasticsearch:
    build:
      context: ./requirements/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    container_name: tr_elasticsearch
    volumes:
      - ./data/credentials/elasticsearch_approle.env:/vault/config/elasticsearch_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      - ./requirements/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch_data:/usr/share/elasticsearch/data:Z
        # (!) TLS certificates. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/elasticsearch/config/ca.crt:ro,z
      - ./requirements/tls/certs/elasticsearch/elasticsearch.crt:/usr/share/elasticsearch/config/elasticsearch.crt:ro,z
      - ./requirements/tls/certs/elasticsearch/elasticsearch.key:/usr/share/elasticsearch/config/elasticsearch.key:ro,z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=elasticsearch
      - SECRET_PATH=elasticsearch
      - node.name=elasticsearch
      - discovery.type=single-node
      - LS_JAVA_OPTS=-Xms256m -Xmx512m
    hostname: elasticsearch
    networks:
      transcendence:
        ipv4_address: 10.0.10.13
    restart: unless-stopped
    entrypoint: ["/vault/entrypoint/entrypoint.sh", "/bin/tini","--","/usr/local/bin/docker-entrypoint.sh"]
    command: "eswrapper"

######################
###### LOGSTASH ######
######################
  logstash:
    build:
      context: ./requirements/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_logstash
    volumes:
      - ./requirements/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./requirements/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./data/credentials/logstash_approle.env:/vault/config/logstash_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      # (!) CA certificate. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/logstash/config/ca.crt:ro,z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=logstash
      - SECRET_PATH=logstash
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    networks:
      transcendence:
        ipv4_address: 10.0.10.14
    hostname: logstash
    depends_on:
      - vault
      - elasticsearch
    restart: unless-stopped
    entrypoint: ["/vault/entrypoint/entrypoint.sh", "/usr/local/bin/docker-entrypoint"]

####################
###### KIBANA ######
####################
  kibana:
    build:
      context: ./requirements/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_kibana
    volumes:
      # Entrypoint script to fetch Vault credentials
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      - ./requirements/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - ./data/credentials/kibana_approle.env:/vault/config/kibana_approle.env:ro
      # (!) TLS certificates. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/kibana/config/ca.crt:ro,z
      - ./requirements/tls/certs/kibana/kibana.crt:/usr/share/kibana/config/kibana.crt:ro,Z
      - ./requirements/tls/certs/kibana/kibana.key:/usr/share/kibana/config/kibana.key:ro,Z
    ports:
      - 5601:5601
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=kibana
      - SECRET_PATH=kibana
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
    networks:
      transcendence:
        ipv4_address: 10.0.10.15
    hostname: kibana
    depends_on:
      - vault
      - elasticsearch
    restart: unless-stopped
    entrypoint: ["/vault/entrypoint/entrypoint.sh", "/bin/tini","--"]
    command: "/usr/local/bin/kibana-docker"

######################
###### FILEBEAT ######
######################
  filebeat:
    build:
      context: ./requirements/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_filebeat
    user: root
    volumes:
      - ./requirements/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - ./data/credentials/filebeat_approle.env:/vault/config/filebeat_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      # (!) CA certificate. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/filebeat/ca.crt:ro,z
    hostname: filebeat
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=filebeat
      - SECRET_PATH=filebeat
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
    networks:
      transcendence:
        ipv4_address: 10.0.10.22
    entrypoint: ["/vault/entrypoint/entrypoint.sh", "/usr/bin/tini","--","/usr/local/bin/docker-entrypoint"]
    command: ["-environment", "container", -e, --strict.perms=false]

#####################
###### CURATOR ######
#####################
  curator:
    build:
      context: ./requirements/curator/
    init: true
    container_name: tr_curator
    volumes:
      - ./requirements/curator/config/curator.yml:/.curator/curator.yml:ro,Z
      - ./requirements/curator/config/delete_log_files_curator.yml:/.curator/delete_log_files_curator.yml:ro,Z
      - ./data/credentials/curator_approle.env:/vault/config/curator_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      # (!) CA certificate. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/.curator/ca.crt:ro,z
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=curator
      - SECRET_PATH=curator
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
    hostname: curator
    networks:
      transcendence:
        ipv4_address: 10.0.10.16
    depends_on:
      - vault
      - elasticsearch

##########################
###### FLEET-SERVER ######
##########################

  fleet-server:
    build:
      context: ./requirements/fleet/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_fleet_server
    user: root
    volumes:
      - fleet_server_data:/usr/share/elastic-agent/state:Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - ./data/credentials/fleet-server_approle.env:/vault/config/fleet-server_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      # (!) TLS certificates. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/elastic-agent/ca.crt:ro,z
      - ./requirements/tls/certs/fleet-server/fleet-server.crt:/usr/share/elastic-agent/fleet-server.crt:ro,Z
      - ./requirements/tls/certs/fleet-server/fleet-server.key:/usr/share/elastic-agent/fleet-server.key:ro,Z
    environment:
      VAULT_ADDR: https://vault:8300
      SERVICE_NAME: fleet-server
      SECRET_PATH: fleet-server
      FLEET_SERVER_ENABLE: '1'
      FLEET_SERVER_HOST: 0.0.0.0
      FLEET_SERVER_POLICY_ID: fleet-server-policy
      FLEET_URL: https://fleet-server:8220
      FLEET_SERVER_CERT: /usr/share/elastic-agent/fleet-server.crt
      FLEET_SERVER_CERT_KEY: /usr/share/elastic-agent/fleet-server.key
      ELASTICSEARCH_HOST: https://elasticsearch:9200
      ELASTICSEARCH_CA: /usr/share/elastic-agent/ca.crt
      KIBANA_FLEET_SETUP: '1'
      ELASTICSEARCH_USERNAME: elastic
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    ports:
      - 8220:8220
    hostname: fleet-server
    restart: on-failure
    networks:
      transcendence:
        ipv4_address: 10.0.10.18
    depends_on:
      - vault
      - elasticsearch
      - kibana
    entrypoint: ["/vault/entrypoint/entrypoint.sh", "/usr/bin/tini" ,"--" ,"/usr/local/bin/docker-entrypoint"]

########################
###### APM-SERVER ######
########################
  apm-server:
    build:
      context: ./requirements/fleet/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_apm_server
    volumes:
      - apm_server_data:/usr/share/elastic-agent/state:Z
      - ./data/credentials/apm-server_approle.env:/vault/config/apm-server_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      # (!) TLS certificates. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/elastic-agent/ca.crt:ro,z
      - ./requirements/tls/certs/apm-server/apm-server.crt:/usr/share/elastic-agent/apm-server.crt:ro,Z
      - ./requirements/tls/certs/apm-server/apm-server.key:/usr/share/elastic-agent/apm-server.key:ro,Z
    environment:
      VAULT_ADDR: https://vault:8300
      SERVICE_NAME: apm-server
      SECRET_PATH: apm-server
      FLEET_ENROLL: '1'
      FLEET_TOKEN_POLICY_NAME: Agent Policy APM Server
      FLEET_URL: https://fleet-server:8220
      ELASTICSEARCH_HOST: https://elasticsearch:9200
      ELASTICSEARCH_CA: /usr/share/elastic-agent/ca.crt
      ELASTICSEARCH_USERNAME: elastic
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    ports:
      - 8200:8200
    hostname: apm-server
    restart: on-failure
    networks:
      transcendence:
        ipv4_address: 10.0.10.19
    depends_on:
      - vault
      - elasticsearch
      - kibana
      - fleet-server
    entrypoint: ["/vault/entrypoint/entrypoint.sh", "/usr/bin/tini" ,"--" ,"/usr/local/bin/docker-entrypoint"]

#######################
###### HEARTBEAT ######
#######################
  heartbeat:
    build:
      context: ./requirements/heartbeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_heartbeat
    volumes:
      - ./requirements/heartbeat/config/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro,Z
      - ./data/credentials/heartbeat_approle.env:/vault/config/heartbeat_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      # (!) CA certificate. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/heartbeat/ca.crt:ro,z
    environment:
      - VAULT_ADDR=https://vault:8300
      - SERVICE_NAME=heartbeat
      - SECRET_PATH=heartbeat
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
    networks:
      transcendence:
        ipv4_address: 10.0.10.20
    hostname: heartbeat
    depends_on:
      - vault
      - elasticsearch
    entrypoint: ["/vault/entrypoint/entrypoint.sh"]
    command: "heartbeat -e --strict.perms=false"

########################
###### METRICBEAT ######
########################

  metricbeat:
    build:
      context: ./requirements/metricbeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_metricbeat
    user: root
    volumes:
      - ./requirements/metricbeat/config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro,Z
      - ./data/credentials/metricbeat_approle.env:/vault/config/metricbeat_approle.env:ro
      - ./requirements/entrypoint/:/vault/entrypoint/:ro
      # (!) CA certificate. Generate using the 'tls' service.
      - ./requirements/tls/certs/ca/ca.crt:/usr/share/metricbeat/ca.crt:ro,z
      - type: bind
        source: /
        target: /hostfs
        read_only: true
      - type: bind
        source: /sys/fs/cgroup
        target: /hostfs/sys/fs/cgroup
        read_only: true
      - type: bind
        source: /proc
        target: /hostfs/proc
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      VAULT_ADDR : "https://vault:8300"
      SERVICE_NAME : "metricbeat"
      SECRET_PATH : "metricbeat"
      ES_JAVA_OPTS : "-Xms256m -Xmx256m"
    networks:
      transcendence:
        ipv4_address: 10.0.10.21
    hostname: metricbeat
    depends_on:
      - vault
      - elasticsearch
    entrypoint: ["/vault/entrypoint/entrypoint.sh"]
    command: "metricbeat -e --strict.perms=false --system.hostfs=/hostfs"

##########################
########PROMETHEUS########
##########################
  prometheus:
    image: prom/prometheus:latest
    container_name: tr_prometheus
    volumes:
      - ./requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      transcendence:
        ipv4_address: 10.0.10.30
    restart: always
    hostname: prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      VAULT_ADDR: ${VAULT_ADDR}

#######################
########GRAFANA########
#######################
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/usr/share/grafana/
      - ./requirements/grafana:/usr/share/grafana/conf/provisioning/datasources
    container_name: tr_grafana
    ports:
      - "3001:3000"
    networks:
      transcendence:
        ipv4_address: 10.0.10.31
    depends_on:
      - vault
      - prometheus
    restart: always
    hostname: grafana
    environment:
      VAULT_ADDR: ${VAULT_ADDR}

#########################
########PORTAINER########
#########################
  portainer:
    image: portainer/portainer-ce:2.20.3
    container_name: tr_portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "${PORTAINER_PORT}:${PORTAINER_PORT}"
    networks:
      transcendence:
        ipv4_address: 10.0.10.40
    hostname: portainer
    environment:
      VAULT_ADDR: ${VAULT_ADDR}

#####################
########NGINX########
#####################
  nginx:
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: tr_nginx
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ./data/certbot/certificates/pong-br.com/:/etc/nginx/ssl/pong-br.com/:ro
      - ./requirements/nginx/pong-br.conf:/etc/nginx/templates/conf.d/default.conf.template
      - ./requirements/nginx/proxy_params:/config/nginx/sites-conf.d/proxy_params
      - ./data/website_data/:/app/static/:ro
      - ./data/media_data/:/app/media/
    networks:
      transcendence:
        ipv4_address: 10.0.10.2
    hostname: nginx
    restart: unless-stopped
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
      - DOMAIN_NAME=${DOMAIN_NAME}
    <<: *default-settings

#####################
########CERTBOT########
#####################
  certbot:
    image: certbot/dns-luadns
    container_name: tr_certbot
    volumes:
        - ./requirements/certbot/luadns.ini:/.secrets/certbot/luadns.ini:ro
        - ./data/certbot/certificates/:/etc/letsencrypt/archive
        - ./data/certbot/logs:/var/log/letsencrypt
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

#####################
########VAULT########
#####################
  vault:
    image: hashicorp/vault:latest
    container_name: tr_vault
    ports:
      - "8300:8300"
      - "8301:8301"
    volumes:
      - ./requirements/vault/config/:/vault/config/:rw
      - ./data/vault_data/data:/vault/data/:rw
      - ./data/vault_data/logs/:/vault/logs/:rw
      - ./data/vault_data/file:/vault/file/:rw
      - ./data/certificates/vault:/vault/certs
      - ./data/certificates/:/certs
    environment:
      - VAULT_ADDR=https://vault:8300
      - VAULT_API_ADDR=https://vault:8301
      - VAULT_ADDRESS=https://vault:8300
      - VAULT_UI=true
      - VAULT_CAPATH=/vault/certs/vault.pem
    cap_add:
      - IPC_LOCK
    networks:
      transcendence:
        ipv4_address: 10.0.10.69
    hostname: vault
    restart: always
    entrypoint: vault server -config /vault/config/config.hcl
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

#######################
########VOLUMES########
#######################
volumes:
  profile_share:

  postgres_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/postgres_data/"

  elasticsearch_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/elasticsearch_data/"

  # django_data:
  #   driver: local
  #   driver_opts:
  #     type: "none"
  #     o: "bind"
  #     device: "./data/django_data/"

  portainer_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/portainer_data/"

  media_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/media_data/"

  apm_server_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/apm_server_data/"

  fleet_server_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/fleet_server_data/"

  grafana_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/grafana_data/"

########################
########NETWORKS########
########################
networks:
  transcendence:
    name: tr_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.10.0/24
