########################
########NETWORKS########
########################
networks:
  transcendence:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.10.0/24
  elastic:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.20.0/16
#######################
########VOLUMES########
#######################
volumes:
  profile_share:

  postgres_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/postgres_data/"

  # django_data:
  #   driver: local
  #   driver_opts:
  #     type: "none"
  #     o: "bind"
  #     device: "./data/django_data/"

  portainer_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/portainer_data/"

  media_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/media_data/"

  certs:
    driver: local

  esdata01:
    driver: local

  kibanadata:
    driver: local

  metricbeatdata01:
    driver: local

  filebeatdata01:
    driver: local

  logstashdata01:
    driver: local

  fleetserverdata:
    driver: local


######################
#######SERVICES#######
######################

services:
  setup:
    container_name: tr_setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting logstash_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting beats_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/ beats_system /_password -d "{\"password\":\"${BEATS_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting apm_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/apm_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting remote_monitoring_user password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/remote_monitoring_user/_password -d "{\"password\":\"${RMU_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic

  es01:
    container_name: tr_es01
    depends_on:
      setup:
        condition: service_healthy
    image: elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      elastic:
        ipv4_address: 10.0.20.10

  kibana:
    container_name: tr_kibana
    depends_on:
      es01:
        condition: service_healthy
    image: kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - ./requirements/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert config/certs/ca/ca.crt https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      elastic:
        ipv4_address: 10.0.20.11

  metricbeat01:
    container_name: tr_metricbeat01
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: elastic/metricbeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - ./requirements/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
      - CA_CERT=certs/ca/ca.crt
      - ES_CERT=certs/es01/es01.crt
      - ES_KEY=certs/es01/es01.key
      - KB_CERT=certs/kibana/kibana.crt
      - KB_KEY=certs/kibana/kibana.key
    command:
      - --strict.perms=false
    networks:
      elastic:
        ipv4_address: 10.0.20.12

  filebeat01:
    container_name: tr_filebeat01
    depends_on:
      es01:
        condition: service_healthy
    image: elastic/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - ./data/elk/filebeat_ingest_data/:/usr/share/filebeat/ingest_data/
      - ./requirements/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    environment:
      - FILEBEAT_INTERNAL_PASSWORD=${FILEBEAT_INTERNAL_PASSWORD}
      - BEATS_SYSTEM_PASSWORD=${BEATS_PASSWORD}
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
      - CA_CERT=certs/ca/ca.crt
    command:
      - --strict.perms=false
    networks:
      elastic:
        ipv4_address: 10.0.20.13

  logstash01:
    container_name: tr_logstash01
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./data/elk/logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - ./requirements/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
    networks:
      elastic:
        ipv4_address: 10.0.20.14

  fleet-server:
    container_name: tr_fleet_server
    depends_on:
      kibana:
        condition: service_healthy
      es01:
        condition: service_healthy
    image: elastic/elastic-agent:${STACK_VERSION}
    volumes:
      - certs:/certs
      - fleetserverdata:/usr/share/elastic-agent
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    ports:
      - ${FLEET_PORT}:8220
      - ${APMSERVER_PORT}:8200
    user: root
    environment:
      - SSL_CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - FLEET_CA=/certs/ca/ca.crt
      - FLEET_ENROLL=1
      - FLEET_INSECURE=true
      - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_INSECURE=true
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
      - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_URL=https://fleet-server:8220
      - KIBANA_FLEET_CA=/certs/ca/ca.crt
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOST=https://kibana:5601
    networks:
      elastic:
        ipv4_address: 10.0.20.15

##########################
########POSTGRESQL########
##########################
  postgresql:
    build:
      context: ./requirements/postgresql
    container_name: tr_postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    expose:
      - 5432
    networks:
      transcendence:
        ipv4_address: 10.0.10.12
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

######################
########DJANGO########
######################
  django:
    container_name: tr_django
    build:
      context: ./requirements/django
    restart: always
    volumes:
      - ./data/django_data:/app
      - ./data/media_data:/app/media
      # - profile_share:/app/transcendence/profiles:rw
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - postgresql
    networks:
      transcendence:
        ipv4_address: 10.0.10.10
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DJANGO_SUPERUSER_NAME=${DJANGO_SUPERUSER_NAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

######################
#######CHANNELS#######
######################
  channels:
    container_name: tr_channels
    build: ./requirements/channels
    restart: always
    volumes:
      - ./data/channels_data:/app
      - ./data/django_data/transcendence/profiles:/app/transcendence/profiles
      # - profile_share:/app/transcendence/profiles:ro
    expose:
      - 8002
    ports:
      - "8002:8002"
    networks:
      transcendence:
        ipv4_address: 10.0.10.11
    depends_on:
      - redis
      - postgresql
      - django
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}

#####################
########REDIS########
#####################
  redis:
    image: redis:7
    container_name: tr_redis
    expose:
      - 6379
    networks:
      transcendence:
        ipv4_address: 10.0.10.70
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always


##########################
########PROMETHEUS########
##########################
  prometheus:
    image: prom/prometheus:latest
    container_name: tr_prometheus
    volumes:
      - ./requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      transcendence:
        ipv4_address: 10.0.10.30
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always

#######################
########GRAFANA########
#######################
  grafana:
    image: grafana/grafana:latest
    container_name: tr_grafana
    ports:
      - "3001:3000"
    networks:
      transcendence:
        ipv4_address: 10.0.10.31
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always

#########################
########PORTAINER########
#########################
  portainer:
    image: portainer/portainer-ce:2.20.3
    container_name: tr_portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "${PORTAINER_PORT}:${PORTAINER_PORT}"
    environment:
      - PORTAINER_USER=${PORTAINER_USER}
      - PORTAINER_PASSWORD=${PORTAINER_PASSWORD}
    networks:
      transcendence:
        ipv4_address: 10.0.10.40
    logging:
      driver: "json-file"
      options:
        max-size: "200k"

#####################
########NGINX########
#####################
  nginx_modsecurity_crs:
    image: owasp/modsecurity-crs:4.7.0-nginx-202410090410
    container_name: tr_nginx_modsecurity_crs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./requirements/nginx/nginx.conf:/etc/nginx/transcendence.conf
      - ./requirements/nginx/default.conf:/etc/nginx/conf.d/transcendence.conf
      - ./requirements/nginx/proxy_params:/etc/nginx/proxy_params
      - ./data/website_data/:/app/static/
      - ./data/media_data/:/app/media/
    networks:
      transcendence:
        ipv4_address: 10.0.10.2
    depends_on:
      - django
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"


#####################
########VAULT########
#####################
  vault:
    image: hashicorp/vault:latest
    container_name: tr_vault
    ports:
      - "30000:30000"
    environment:
      - VAULT_ADDR=http://0.0.0.0:30000
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
    cap_add:
      - IPC_LOCK
    networks:
      transcendence:
        ipv4_address: 10.0.10.80
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always

