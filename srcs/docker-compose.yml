services:
  setup:
    profiles:
      - setup
    build:
      context: ./requirements/elastic/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_setup
    init: true
    volumes:
      - ./requirements/elastic/setup/entrypoint.sh:/entrypoint.sh
      - ./requirements/elastic/setup/lib.sh:/lib.sh
      - ./requirements/elastic/setup/roles:/roles
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - transcendence
    depends_on:
      - elasticsearch

##########################
########POSTGRESQL########
##########################
  postgresql:
    build:
      context: ./requirements/postgresql
    container_name: tr_postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    expose:
      - 5432
    networks:
      transcendence:
        ipv4_address: 10.0.10.12
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

######################
########DJANGO########
######################
  django:
    container_name: tr_django
    build:
      context: ./requirements/django
    restart: always
    volumes:
      - ./data/django_data:/app
      - ./data/media_data:/app/media
      # - profile_share:/app/transcendence/profiles:rw
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - postgresql
    networks:
      transcendence:
        ipv4_address: 10.0.10.10
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DJANGO_SUPERUSER_NAME=${DJANGO_SUPERUSER_NAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

######################
#######CHANNELS#######
######################
  channels:
    container_name: tr_channels
    build: ./requirements/channels
    restart: always
    volumes:
      - ./data/channels_data:/app
      - ./data/django_data/transcendence/profiles:/app/transcendence/profiles
      # - profile_share:/app/transcendence/profiles:ro
    expose:
      - 8002
    ports:
      - "8002:8002"
    networks:
      transcendence:
        ipv4_address: 10.0.10.11
    depends_on:
      - redis
      - postgresql
      - django
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}

#####################
########REDIS########
#####################
  redis:
    image: redis:7
    container_name: tr_redis
    expose:
      - 6379
    networks:
      transcendence:
        ipv4_address: 10.0.10.70
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always

###########################
###### ELASTICSEARCH ######
###########################
  elasticsearch:
    build:
      context: ./requirements/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_elasticsearch
    volumes:
      - ./requirements/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch_data:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    hostname: elasticsearch
    networks:
      transcendence:
        ipv4_address: 10.0.10.13
    restart: unless-stopped


######################
###### LOGSTASH ######
######################
  logstash:
    build:
      context: ./requirements/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_logstash
    volumes:
      - ./requirements/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./requirements/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      transcendence:
        ipv4_address: 10.0.10.14
    hostname: logstash
    depends_on:
      - elasticsearch
    restart: unless-stopped


####################
###### KIBANA ######
####################
  kibana:
    build:
      context: ./requirements/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_kibana
    volumes:
      - ./requirements/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      transcendence:
        ipv4_address: 10.0.10.15
    hostname: kibana
    depends_on:
      - elasticsearch
    restart: unless-stopped

######################
###### FILEBEAT ######
######################
  filebeat:
    build:
      context: ./requirements/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    container_name: tr_filebeat
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./requirements/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    hostname: filebeat
    environment:
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      transcendence:
        ipv4_address: 10.0.10.22
#####################
###### CURATOR ######
#####################
  curator:
    build:
      context: ./requirements/curator/
    init: true
    container_name: tr_curator
    volumes:
      - ./requirements/curator/config/curator.yml:/.curator/curator.yml:ro,Z
      - ./requirements/curator/config/delete_log_files_curator.yml:/.curator/delete_log_files_curator.yml:ro,Z
    environment:
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    hostname: curator
    networks:
      transcendence:
        ipv4_address: 10.0.10.16
    depends_on:
      - elasticsearch

##########################
###### FLEET-SERVER ######
##########################

  fleet-server:
    build:
      context: ./requirements/fleet/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'elastic-agent' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    container_name: tr_fleet_server
    user: root
    volumes:
      - fleet_server_data:/usr/share/elastic-agent/state:Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      FLEET_SERVER_ENABLE: '1'
      FLEET_SERVER_INSECURE_HTTP: '1'
      FLEET_SERVER_HOST: 0.0.0.0
      FLEET_SERVER_POLICY_ID: fleet-server-policy
      # Fleet plugin in Kibana
      KIBANA_FLEET_SETUP: '1'
      # Enrollment.
      # (a) Auto-enroll using basic authentication
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-}
      # (b) Enroll using a pre-generated service token
      #FLEET_SERVER_SERVICE_TOKEN: <service_token>
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    ports:
      - 8220:8220
    hostname: fleet-server
    # Elastic Agent does not retry failed connections to Kibana upon the initial enrollment phase.
    restart: on-failure
    networks:
      transcendence:
        ipv4_address: 10.0.10.18
    depends_on:
      - elasticsearch
      - kibana

########################
###### APM-SERVER ######
########################
  apm-server:
    build:
      context: ./requirements/fleet/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_apm_server
    volumes:
      - apm_server_data:/usr/share/elastic-agent/state:Z
    environment:
      FLEET_ENROLL: '1'
      FLEET_TOKEN_POLICY_NAME: Agent Policy APM Server
      FLEET_INSECURE: '1'
      FLEET_URL: http://fleet-server:8220
      # Enrollment.
      # (a) Auto-enroll using basic authentication
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-}
      # (b) Enroll using a pre-generated enrollment token
      #FLEET_ENROLLMENT_TOKEN: <enrollment_token>
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    ports:
      - 8200:8200
    hostname: apm-server
    # Elastic Agent does not retry failed connections to Kibana upon the initial enrollment phase.
    restart: on-failure
    networks:
      transcendence:
        ipv4_address: 10.0.10.19
    depends_on:
      - elasticsearch
      - kibana
      - fleet-server

#######################
###### HEARTBEAT ######
#######################

  heartbeat:
    build:
      context: ./requirements/heartbeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_heartbeat
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/heartbeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./requirements/heartbeat/config/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro,Z
    environment:
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    networks:
      transcendence:
        ipv4_address: 10.0.10.20
    depends_on:
      - elasticsearch

########################
###### METRICBEAT ######
########################

  metricbeat:
    build:
      context: ./requirements/metricbeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: tr_metricbeat
    # Run as 'root' instead of 'metricbeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/metricbeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
      # Mount point of the host’s filesystem. Required to monitor the host
      # from within a container.
      - --system.hostfs=/hostfs
    volumes:
      - ./requirements/metricbeat/config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro,Z
      - type: bind
        source: /
        target: /hostfs
        read_only: true
      - type: bind
        source: /sys/fs/cgroup
        target: /hostfs/sys/fs/cgroup
        read_only: true
      - type: bind
        source: /proc
        target: /hostfs/proc
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    networks:
      transcendence:
        ipv4_address: 10.0.10.21
    depends_on:
      - elasticsearch

##########################
########PROMETHEUS########
##########################
  prometheus:
    image: prom/prometheus:latest
    container_name: tr_prometheus
    volumes:
      - ./requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      transcendence:
        ipv4_address: 10.0.10.30
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

#######################
########GRAFANA########
#######################
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/usr/share/grafana/
      - ./requirements/grafana:/usr/share/grafana/conf/provisioning/datasources
    container_name: tr_grafana
    ports:
      - "3001:3000"
    networks:
      transcendence:
        ipv4_address: 10.0.10.31
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always

#########################
########PORTAINER########
#########################
  portainer:
    image: portainer/portainer-ce:2.20.3
    container_name: tr_portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "${PORTAINER_PORT}:${PORTAINER_PORT}"
    environment:
      - PORTAINER_USER=${PORTAINER_USER}
      - PORTAINER_PASSWORD=${PORTAINER_PASSWORD}
    networks:
      transcendence:
        ipv4_address: 10.0.10.40
    logging:
      driver: "json-file"
      options:
        max-size: "200k"

#####################
########NGINX########
#####################
  nginx_modsecurity_crs:
    image: owasp/modsecurity-crs:4.7.0-nginx-202410090410
    container_name: tr_nginx_modsecurity_crs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./requirements/nginx/nginx.conf:/etc/nginx/transcendence.conf
      - ./requirements/nginx/default.conf:/etc/nginx/conf.d/transcendence.conf
      - ./requirements/nginx/proxy_params:/etc/nginx/proxy_params
      - ./data/website_data/:/app/static/
      - ./data/media_data/:/app/media/
    networks:
      transcendence:
        ipv4_address: 10.0.10.2
    depends_on:
      - django
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"


#####################
########VAULT########
#####################
  vault:
    image: hashicorp/vault:latest
    container_name: tr_vault
    ports:
      - "30000:30000"
    environment:
      - VAULT_ADDR=http://0.0.0.0:30000
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
    cap_add:
      - IPC_LOCK
    networks:
      transcendence:
        ipv4_address: 10.0.10.69
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: always

#######################
########VOLUMES########
#######################
volumes:
  profile_share:

  postgres_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/postgres_data/"

  elasticsearch_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/elasticsearch_data/"

  # django_data:
  #   driver: local
  #   driver_opts:
  #     type: "none"
  #     o: "bind"
  #     device: "./data/django_data/"

  portainer_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/portainer_data/"

  media_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/media_data/"

  apm_server_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/apm_server_data/"

  fleet_server_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/fleet_server_data/"

  grafana_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./data/grafana_data/"

########################
########NETWORKS########
########################
networks:
  transcendence:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.10.0/24
